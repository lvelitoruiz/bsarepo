{
  "{\"sourceRoot\":\"/Applications/XAMPP/xamppfiles/htdocs/dev-test/\",\"caller\":{\"name\":\"@babel/register\"},\"cwd\":\"/Applications/XAMPP/xamppfiles/htdocs/dev-test\",\"filename\":\"/Applications/XAMPP/xamppfiles/htdocs/dev-test/gulpfile.babel.js\",\"babelrc\":false,\"configFile\":false,\"passPerPreset\":false,\"envName\":\"development\",\"root\":\"/Applications/XAMPP/xamppfiles/htdocs/dev-test\",\"plugins\":[],\"presets\":[]}:7.9.6": {
    "metadata": {},
    "options": {
      "sourceRoot": "/Applications/XAMPP/xamppfiles/htdocs/dev-test/",
      "caller": {
        "name": "@babel/register"
      },
      "cwd": "/Applications/XAMPP/xamppfiles/htdocs/dev-test",
      "filename": "/Applications/XAMPP/xamppfiles/htdocs/dev-test/gulpfile.babel.js",
      "babelrc": false,
      "configFile": false,
      "envName": "development",
      "root": "/Applications/XAMPP/xamppfiles/htdocs/dev-test",
      "sourceMaps": "both",
      "ast": false,
      "passPerPreset": false,
      "plugins": [],
      "presets": [],
      "parserOpts": {
        "sourceType": "module",
        "sourceFileName": "/Applications/XAMPP/xamppfiles/htdocs/dev-test/gulpfile.babel.js",
        "plugins": []
      },
      "generatorOpts": {
        "filename": "/Applications/XAMPP/xamppfiles/htdocs/dev-test/gulpfile.babel.js",
        "comments": true,
        "compact": "auto",
        "sourceMaps": "both",
        "sourceRoot": "/Applications/XAMPP/xamppfiles/htdocs/dev-test/",
        "sourceFileName": "gulpfile.babel.js"
      }
    },
    "ast": null,
    "code": "/**\n * Gulpfile\n *\n * Implements:\n *      1. Live reloads browser with BrowserSync.\n *      2. CSS: Sass to CSS conversion, error catching, Autoprefixing, Sourcemaps,\n *         CSS minification, and Merge Media Queries.\n *      3. JS: Concatenates & uglifies JS files.\n *      4. Images: Minifies PNG, JPEG, GIF and SVG images.\n *      5. Watches files for changes in CSS or JS.\n *      6. Watches files for changes in PHP.\n *      7. Corrects the line endings.\n *      8. InjectCSS instead of browser page reload.\n *      9. Generates .pot file for i18n and l10n.\n *\n */\n\n/**\n * Load Gulp Configuration.\n */\nconst config = require('./gulp.config.js');\n/**\n * Load Plugins.\n *\n * Load gulp plugins and passing them semantic names.\n */\n\n\nconst gulp = require('gulp'); // Gulp of-course.\n// CSS related plugins.\n\n\nconst sass = require('gulp-sass'); // Gulp plugin for Sass compilation.\n\n\nconst cssnano = require('cssnano'); // Minifies CSS files.\n\n\nconst cssnext = require('postcss-cssnext');\n\nconst postcss = require('gulp-postcss');\n\nconst rtlcss = require('gulp-rtlcss'); // Generates RTL stylesheet.\n// JS related plugins.\n\n\nconst webpack = require('webpack-stream'); // Ensures we can import dependencies\n\n\nconst concat = require('gulp-concat'); // Concatenates JS files.\n\n\nconst uglify = require('gulp-uglify'); // Minifies JS files.\n\n\nconst babel = require('gulp-babel'); // Compiles ESNext to browser compatible JS.\n// Image related plugins.\n\n\nconst imagemin = require('gulp-imagemin'); // Minify PNG, JPEG, GIF and SVG images with imagemin.\n// Utility related plugins.\n\n\nconst rename = require('gulp-rename'); // Renames files E.g. style.css -> style.min.css.\n\n\nconst lineec = require('gulp-line-ending-corrector'); // Consistent Line Endings for non UNIX systems. Gulp Plugin for Line Ending Corrector (A utility that makes sure your files have consistent line endings).\n\n\nconst filter = require('gulp-filter'); // Enables you to work on a subset of the original files by filtering them using a glob.\n\n\nconst sourcemaps = require('gulp-sourcemaps'); // Maps code in a compressed file (E.g. style.css) back to itâ€™s original position in a source file (E.g. structure.scss, which was later combined with other css files to generate style.css).\n\n\nconst notify = require('gulp-notify'); // Sends message notification to you.\n\n\nconst browserSync = require('browser-sync').create(); // Reloads browser and injects CSS. Time-saving synchronized browser testing.\n\n\nconst wpPot = require('gulp-wp-pot'); // For generating the .pot file.\n\n\nconst sort = require('gulp-sort'); // Recommended to prevent unnecessary changes in pot-file.\n\n\nconst cache = require('gulp-cache'); // Cache files in stream for later use.\n\n\nconst remember = require('gulp-remember'); //  Adds all the files it has ever seen back into the stream.\n\n\nconst plumber = require('gulp-plumber'); // Prevent pipe breaking caused by errors from gulp plugins.\n\n\nconst beep = require('beepbeep');\n\nconst gulpif = require('gulp-if');\n\nconst argv = require('yargs').argv; // Variables Used within Build Process\n\n\nconst isProduction = argv.production !== undefined;\nconst postCssProd = [cssnext(), cssnano()];\nconst postCssDev = [cssnext()];\n/**\n * Custom Error Handler.\n *\n * @param Mixed err\n */\n\nconst errorHandler = r => {\n  notify.onError('\\n\\n===> ERROR: <%= error.message %>\\n')(r);\n  beep(); // this.emit('end');\n};\n/**\n * Task: `browser-sync`.\n *\n * Live Reloads, CSS injections, Localhost tunneling.\n * @link http://www.browsersync.io/docs/options/\n *\n * @param {Mixed} done Done.\n */\n\n\nconst browsersync = done => {\n  browserSync.init({\n    proxy: config.projectURL,\n    open: config.browserAutoOpen,\n    injectChanges: config.injectChanges,\n    watchEvents: ['change', 'add', 'unlink', 'addDir', 'unlinkDir']\n  });\n  done();\n}; // Helper function to allow browser reload with Gulp 4.\n\n\nconst reload = done => {\n  browserSync.reload();\n  done();\n};\n/**\n * Task: `styles`.\n *\n * Compiles Sass, Autoprefixes it and Minifies CSS.\n *\n * This task does the following:\n *    1. Gets the source scss file\n *    2. Compiles Sass to CSS\n *    3. Writes Sourcemaps for it\n *    4. Autoprefixes it and generates style.css\n *    5. Renames the CSS file with suffix .min.css\n *    6. Minifies the CSS file and generates style.min.css\n *    7. Injects CSS or reloads the browser via browserSync\n */\n\n\ngulp.task('styles', () => {\n  return gulp.src(config.styleSRC, {\n    allowEmpty: true\n  }).pipe(plumber()).pipe(sourcemaps.init()).pipe(sass({\n    errLogToConsole: config.errLogToConsole,\n    outputStyle: config.outputStyle,\n    precision: config.precision\n  })).on('error', sass.logError).pipe(gulpif(isProduction, postcss(postCssProd), postcss(postCssDev))).pipe(sourcemaps.write({\n    includeContent: false\n  })).pipe(sourcemaps.init({\n    loadMaps: true\n  })).pipe(sourcemaps.write('./')).pipe(lineec()) // Consistent Line Endings for non UNIX systems.\n  .pipe(gulp.dest(config.styleDestination)).pipe(filter('**/*.css')) // Filtering stream to only css files.\n  .pipe(gulpif(!isProduction, browserSync.stream())) // Reloads style.css if that is enqueued.\n  .pipe(notify({\n    message: '\\n\\n===> Styles Compiled\\n',\n    onLast: true\n  }));\n});\n/**\n * Task: `stylesRTL`.\n *\n * Compiles Sass, Autoprefixes it, Generates RTL stylesheet, and Minifies CSS.\n *\n * This task does the following:\n *    1. Gets the source scss file\n *    2. Compiles Sass to CSS\n *    4. Autoprefixes it and generates style.css\n *    5. Renames the CSS file with suffix -rtl and generates style-rtl.css\n *    6. Writes Sourcemaps for style-rtl.css\n *    7. Renames the CSS files with suffix .min.css\n *    8. Minifies the CSS file and generates style-rtl.min.css\n *    9. Injects CSS or reloads the browser via browserSync\n */\n\ngulp.task('stylesRTL', () => {\n  return gulp.src(config.styleSRC, {\n    allowEmpty: true\n  }).pipe(plumber(errorHandler)).pipe(sourcemaps.init()).pipe(sass({\n    errLogToConsole: config.errLogToConsole,\n    outputStyle: config.outputStyle,\n    precision: config.precision\n  })).on('error', sass.logError).pipe(gulpif(isProduction, postcss(postCssProd), postcss(postCssDev))).pipe(sourcemaps.write({\n    includeContent: false\n  })).pipe(sourcemaps.init({\n    loadMaps: true\n  })).pipe(lineec()) // Consistent Line Endings for non UNIX systems.\n  .pipe(rename({\n    suffix: '-rtl'\n  })) // Append \"-rtl\" to the filename.\n  .pipe(rtlcss()) // Convert to RTL.\n  .pipe(sourcemaps.write('./')) // Output sourcemap for style-rtl.css.\n  .pipe(gulp.dest(config.styleDestination)).pipe(filter('**/*.css')) // Filtering stream to only css files.\n  .pipe(gulpif(!isProduction, browserSync.stream())) // Reloads style.css or style-rtl.css, if that is enqueued.\n  .pipe(notify({\n    message: '\\n\\n===> Styles RTL Compiled\\n',\n    onLast: true\n  }));\n});\n/**\n * Task: `customJS`.\n *\n * Concatenate and uglify custom JS scripts.\n *\n * This task does the following:\n *     1. Gets the source folder for JS custom files\n *     2. Concatenates all the files and generates custom.js\n *     3. Renames the JS file with suffix .min.js\n *     4. Uglifes/Minifies the JS file and generates custom.min.js\n */\n\ngulp.task('customJS', () => {\n  return gulp.src(config.jsCustomSRC, {\n    allowEmpty: true\n  }) // Only run on changed files.\n  .pipe(plumber(errorHandler)).pipe(webpack({\n    mode: isProduction ? 'production' : 'development'\n  })).pipe(babel({\n    presets: [['@babel/preset-env', // Preset to compile your modern JS to ES5.\n    {\n      targets: {\n        browsers: config.BROWSERS_LIST\n      } // Target browser list to support.\n\n    }]],\n    compact: isProduction\n  })).pipe(concat(config.jsCustomFile + '.js')).pipe(gulpif(isProduction, uglify())).pipe(lineec()) // Consistent Line Endings for non UNIX systems.\n  .pipe(gulp.dest(config.jsCustomDestination)).pipe(notify({\n    message: '\\n\\n===> JavaScript Compiled\\n',\n    onLast: true\n  }));\n});\n/**\n * Task: `images`.\n *\n * Minifies PNG, JPEG, GIF and SVG images.\n *\n * This task does the following:\n *     1. Gets the source of images raw folder\n *     2. Minifies PNG, JPEG, GIF and SVG images\n *     3. Generates and saves the optimized images\n *\n * This task will run only once, if you want to run it\n * again, do it with the command `gulp images`.\n *\n * Read the following to change these options.\n * @link https://github.com/sindresorhus/gulp-imagemin\n */\n\ngulp.task('images', () => {\n  return gulp.src(config.imgSRC).pipe(cache(imagemin([imagemin.gifsicle({\n    interlaced: true\n  }), imagemin.mozjpeg({\n    progressive: true\n  }), imagemin.optipng({\n    optimizationLevel: 3\n  }), // 0-7 low-high.\n  imagemin.svgo({\n    plugins: [{\n      removeViewBox: true\n    }, {\n      cleanupIDs: false\n    }]\n  })]))).pipe(gulp.dest(config.imgDST)).pipe(notify({\n    message: '\\n\\n===> Images Optimized\\n',\n    onLast: true\n  }));\n});\n/**\n * Task: `clear-images-cache`.\n *\n * Deletes the images cache. By running the next \"images\" task,\n * each image will be regenerated.\n */\n\ngulp.task('clearCache', function (done) {\n  return cache.clearAll(done);\n});\n/**\n * Watch Tasks.\n *\n * Watches for file changes and runs specific tasks.\n */\n\ngulp.task('default', gulp.parallel('styles', 'customJS', 'images', browsersync, () => {\n  gulp.watch(config.watchPhp, reload); // Reload on PHP file changes.\n\n  gulp.watch(config.watchStyles, gulp.parallel('styles')); // Reload on SCSS file changes.\n\n  gulp.watch(config.watchJsCustom, gulp.series('customJS', reload)); // Reload on customJS file changes.\n\n  gulp.watch(config.imgSRC, gulp.series('images', reload)); // Reload on customJS file changes.\n}));\n/**\n * Build for Production.\n *\n * Watches for file changes and runs specific tasks.\n */\n\ngulp.task('production', gulp.parallel('styles', 'customJS', 'images'));\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,",
    "map": {
      "version": 3,
      "sources": [
        "gulpfile.babel.js"
      ],
      "names": [
        "config",
        "require",
        "gulp",
        "sass",
        "cssnano",
        "cssnext",
        "postcss",
        "rtlcss",
        "webpack",
        "concat",
        "uglify",
        "babel",
        "imagemin",
        "rename",
        "lineec",
        "filter",
        "sourcemaps",
        "notify",
        "browserSync",
        "create",
        "wpPot",
        "sort",
        "cache",
        "remember",
        "plumber",
        "beep",
        "gulpif",
        "argv",
        "isProduction",
        "production",
        "undefined",
        "postCssProd",
        "postCssDev",
        "errorHandler",
        "r",
        "onError",
        "browsersync",
        "done",
        "init",
        "proxy",
        "projectURL",
        "open",
        "browserAutoOpen",
        "injectChanges",
        "watchEvents",
        "reload",
        "task",
        "src",
        "styleSRC",
        "allowEmpty",
        "pipe",
        "errLogToConsole",
        "outputStyle",
        "precision",
        "on",
        "logError",
        "write",
        "includeContent",
        "loadMaps",
        "dest",
        "styleDestination",
        "stream",
        "message",
        "onLast",
        "suffix",
        "jsCustomSRC",
        "mode",
        "presets",
        "targets",
        "browsers",
        "BROWSERS_LIST",
        "compact",
        "jsCustomFile",
        "jsCustomDestination",
        "imgSRC",
        "gifsicle",
        "interlaced",
        "mozjpeg",
        "progressive",
        "optipng",
        "optimizationLevel",
        "svgo",
        "plugins",
        "removeViewBox",
        "cleanupIDs",
        "imgDST",
        "clearAll",
        "parallel",
        "watch",
        "watchPhp",
        "watchStyles",
        "watchJsCustom",
        "series"
      ],
      "mappings": "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",
      "sourceRoot": "/Applications/XAMPP/xamppfiles/htdocs/dev-test/",
      "sourcesContent": [
        "/**\n * Gulpfile\n *\n * Implements:\n *      1. Live reloads browser with BrowserSync.\n *      2. CSS: Sass to CSS conversion, error catching, Autoprefixing, Sourcemaps,\n *         CSS minification, and Merge Media Queries.\n *      3. JS: Concatenates & uglifies JS files.\n *      4. Images: Minifies PNG, JPEG, GIF and SVG images.\n *      5. Watches files for changes in CSS or JS.\n *      6. Watches files for changes in PHP.\n *      7. Corrects the line endings.\n *      8. InjectCSS instead of browser page reload.\n *      9. Generates .pot file for i18n and l10n.\n *\n */\n\n/**\n * Load Gulp Configuration.\n */\nconst config = require( './gulp.config.js' );\n\n/**\n * Load Plugins.\n *\n * Load gulp plugins and passing them semantic names.\n */\nconst gulp = require( 'gulp' ); // Gulp of-course.\n\n// CSS related plugins.\nconst sass = require( 'gulp-sass' ); // Gulp plugin for Sass compilation.\nconst cssnano = require( 'cssnano' ); // Minifies CSS files.\nconst cssnext = require( 'postcss-cssnext' );\nconst postcss = require( 'gulp-postcss' );\nconst rtlcss = require( 'gulp-rtlcss' ); // Generates RTL stylesheet.\n\n// JS related plugins.\nconst webpack = require('webpack-stream'); // Ensures we can import dependencies\nconst concat = require( 'gulp-concat' ); // Concatenates JS files.\nconst uglify = require( 'gulp-uglify' ); // Minifies JS files.\nconst babel = require( 'gulp-babel' ); // Compiles ESNext to browser compatible JS.\n\n// Image related plugins.\nconst imagemin = require( 'gulp-imagemin' ); // Minify PNG, JPEG, GIF and SVG images with imagemin.\n\n// Utility related plugins.\nconst rename = require( 'gulp-rename' ); // Renames files E.g. style.css -> style.min.css.\nconst lineec = require( 'gulp-line-ending-corrector' ); // Consistent Line Endings for non UNIX systems. Gulp Plugin for Line Ending Corrector (A utility that makes sure your files have consistent line endings).\nconst filter = require( 'gulp-filter' ); // Enables you to work on a subset of the original files by filtering them using a glob.\nconst sourcemaps = require( 'gulp-sourcemaps' ); // Maps code in a compressed file (E.g. style.css) back to itâ€™s original position in a source file (E.g. structure.scss, which was later combined with other css files to generate style.css).\nconst notify = require( 'gulp-notify' ); // Sends message notification to you.\nconst browserSync = require( 'browser-sync' ).create(); // Reloads browser and injects CSS. Time-saving synchronized browser testing.\nconst wpPot = require( 'gulp-wp-pot' ); // For generating the .pot file.\nconst sort = require( 'gulp-sort' ); // Recommended to prevent unnecessary changes in pot-file.\nconst cache = require( 'gulp-cache' ); // Cache files in stream for later use.\nconst remember = require( 'gulp-remember' ); //  Adds all the files it has ever seen back into the stream.\nconst plumber = require( 'gulp-plumber' ); // Prevent pipe breaking caused by errors from gulp plugins.\nconst beep = require( 'beepbeep' );\nconst gulpif = require( 'gulp-if' );\nconst argv = require('yargs').argv;\n\n// Variables Used within Build Process\nconst isProduction = (argv.production !== undefined);\nconst postCssProd = [ cssnext(), cssnano() ];\nconst postCssDev = [ cssnext() ];\n\n/**\n * Custom Error Handler.\n *\n * @param Mixed err\n */\nconst errorHandler = r => {\n\tnotify.onError( '\\n\\n===> ERROR: <%= error.message %>\\n' )( r );\n\tbeep();\n\n\t// this.emit('end');\n};\n\n/**\n * Task: `browser-sync`.\n *\n * Live Reloads, CSS injections, Localhost tunneling.\n * @link http://www.browsersync.io/docs/options/\n *\n * @param {Mixed} done Done.\n */\nconst browsersync = done => {\n\tbrowserSync.init({\n\t\tproxy: config.projectURL,\n\t\topen: config.browserAutoOpen,\n\t\tinjectChanges: config.injectChanges,\n\t\twatchEvents: [ 'change', 'add', 'unlink', 'addDir', 'unlinkDir' ]\n\t});\n\tdone();\n};\n\n// Helper function to allow browser reload with Gulp 4.\nconst reload = done => {\n\tbrowserSync.reload();\n\tdone();\n};\n\n/**\n * Task: `styles`.\n *\n * Compiles Sass, Autoprefixes it and Minifies CSS.\n *\n * This task does the following:\n *    1. Gets the source scss file\n *    2. Compiles Sass to CSS\n *    3. Writes Sourcemaps for it\n *    4. Autoprefixes it and generates style.css\n *    5. Renames the CSS file with suffix .min.css\n *    6. Minifies the CSS file and generates style.min.css\n *    7. Injects CSS or reloads the browser via browserSync\n */\ngulp.task( 'styles', () => {\n\treturn gulp\n\t\t.src( config.styleSRC, { allowEmpty: true })\n\t\t.pipe( plumber() )\n\t\t.pipe( sourcemaps.init() )\n\t\t.pipe(\n\t\t\tsass({\n\t\t\t\terrLogToConsole: config.errLogToConsole,\n\t\t\t\toutputStyle: config.outputStyle,\n\t\t\t\tprecision: config.precision\n\t\t\t})\n\t\t)\n\t\t.on( 'error', sass.logError )\n\t\t.pipe( gulpif( isProduction, postcss( postCssProd ), postcss( postCssDev ) ) )\n\t\t.pipe( sourcemaps.write({ includeContent: false }) )\n\t\t.pipe( sourcemaps.init({ loadMaps: true }) )\n\t\t.pipe( sourcemaps.write( './' ) )\n\t\t.pipe( lineec() ) // Consistent Line Endings for non UNIX systems.\n\t\t.pipe( gulp.dest( config.styleDestination ) )\n\t\t.pipe( filter( '**/*.css' ) ) // Filtering stream to only css files.\n\t\t.pipe( gulpif( !isProduction, browserSync.stream() ) ) // Reloads style.css if that is enqueued.\n\t\t.pipe( notify({ message: '\\n\\n===> Styles Compiled\\n', onLast: true }) );\n});\n\n/**\n * Task: `stylesRTL`.\n *\n * Compiles Sass, Autoprefixes it, Generates RTL stylesheet, and Minifies CSS.\n *\n * This task does the following:\n *    1. Gets the source scss file\n *    2. Compiles Sass to CSS\n *    4. Autoprefixes it and generates style.css\n *    5. Renames the CSS file with suffix -rtl and generates style-rtl.css\n *    6. Writes Sourcemaps for style-rtl.css\n *    7. Renames the CSS files with suffix .min.css\n *    8. Minifies the CSS file and generates style-rtl.min.css\n *    9. Injects CSS or reloads the browser via browserSync\n */\ngulp.task( 'stylesRTL', () => {\n\treturn gulp\n\t\t.src( config.styleSRC, { allowEmpty: true })\n\t\t.pipe( plumber( errorHandler ) )\n\t\t.pipe( sourcemaps.init() )\n\t\t.pipe(\n\t\t\tsass({\n\t\t\t\terrLogToConsole: config.errLogToConsole,\n\t\t\t\toutputStyle: config.outputStyle,\n\t\t\t\tprecision: config.precision\n\t\t\t})\n\t\t)\n\t\t.on( 'error', sass.logError )\n\t\t.pipe( gulpif( isProduction, postcss( postCssProd ), postcss( postCssDev ) ) )\n\t\t.pipe( sourcemaps.write({ includeContent: false }) )\n\t\t.pipe( sourcemaps.init({ loadMaps: true }) )\n\t\t.pipe( lineec() ) // Consistent Line Endings for non UNIX systems.\n\t\t.pipe( rename({ suffix: '-rtl' }) ) // Append \"-rtl\" to the filename.\n\t\t.pipe( rtlcss() ) // Convert to RTL.\n\t\t.pipe( sourcemaps.write( './' ) ) // Output sourcemap for style-rtl.css.\n\t\t.pipe( gulp.dest( config.styleDestination ) )\n\t\t.pipe( filter( '**/*.css' ) ) // Filtering stream to only css files.\n\t\t.pipe( gulpif( !isProduction, browserSync.stream() ) ) // Reloads style.css or style-rtl.css, if that is enqueued.\n\t\t.pipe( notify({ message: '\\n\\n===> Styles RTL Compiled\\n', onLast: true }) );\n});\n\n/**\n * Task: `customJS`.\n *\n * Concatenate and uglify custom JS scripts.\n *\n * This task does the following:\n *     1. Gets the source folder for JS custom files\n *     2. Concatenates all the files and generates custom.js\n *     3. Renames the JS file with suffix .min.js\n *     4. Uglifes/Minifies the JS file and generates custom.min.js\n */\ngulp.task( 'customJS', () => {\n\treturn gulp\n\t\t.src( config.jsCustomSRC, { allowEmpty: true }) // Only run on changed files.\n\t\t.pipe( plumber( errorHandler ) )\n\t\t.pipe( webpack({ mode: isProduction ? 'production' : 'development' }))\n\t\t.pipe(\n\t\t\tbabel({\n\t\t\t\tpresets: [\n\t\t\t\t\t[\n\t\t\t\t\t\t'@babel/preset-env', // Preset to compile your modern JS to ES5.\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\ttargets: { browsers: config.BROWSERS_LIST } // Target browser list to support.\n\t\t\t\t\t\t}\n\t\t\t\t\t]\n\t\t\t\t],\n\t\t\t\tcompact: isProduction\n\t\t\t})\n\t\t)\n\t\t.pipe( concat( config.jsCustomFile + '.js' ) )\n\t\t.pipe( gulpif( isProduction, uglify() ) )\n\t\t.pipe( lineec() ) // Consistent Line Endings for non UNIX systems.\n\t\t.pipe( gulp.dest( config.jsCustomDestination ) )\n\t\t.pipe( notify({ message: '\\n\\n===> JavaScript Compiled\\n', onLast: true }) );\n});\n\n/**\n * Task: `images`.\n *\n * Minifies PNG, JPEG, GIF and SVG images.\n *\n * This task does the following:\n *     1. Gets the source of images raw folder\n *     2. Minifies PNG, JPEG, GIF and SVG images\n *     3. Generates and saves the optimized images\n *\n * This task will run only once, if you want to run it\n * again, do it with the command `gulp images`.\n *\n * Read the following to change these options.\n * @link https://github.com/sindresorhus/gulp-imagemin\n */\ngulp.task( 'images', () => {\n\treturn gulp\n\t\t.src( config.imgSRC )\n\t\t.pipe(\n\t\t\tcache(\n\t\t\t\timagemin([\n\t\t\t\t\timagemin.gifsicle({ interlaced: true }),\n\t\t\t\t\timagemin.mozjpeg({ progressive: true }),\n\t\t\t\t\timagemin.optipng({ optimizationLevel: 3 }), // 0-7 low-high.\n\t\t\t\t\timagemin.svgo({\n\t\t\t\t\t\tplugins: [ { removeViewBox: true }, { cleanupIDs: false } ]\n\t\t\t\t\t})\n\t\t\t\t])\n\t\t\t)\n\t\t)\n\t\t.pipe( gulp.dest( config.imgDST ) )\n\t\t.pipe( notify({ message: '\\n\\n===> Images Optimized\\n', onLast: true }) );\n});\n\n/**\n * Task: `clear-images-cache`.\n *\n * Deletes the images cache. By running the next \"images\" task,\n * each image will be regenerated.\n */\ngulp.task( 'clearCache', function( done ) {\n\treturn cache.clearAll( done );\n});\n\n/**\n * Watch Tasks.\n *\n * Watches for file changes and runs specific tasks.\n */\ngulp.task(\n\t'default',\n\tgulp.parallel( 'styles', 'customJS', 'images', browsersync, () => {\n\t\tgulp.watch( config.watchPhp, reload ); // Reload on PHP file changes.\n\t\tgulp.watch( config.watchStyles, gulp.parallel( 'styles' ) ); // Reload on SCSS file changes.\n\t\tgulp.watch( config.watchJsCustom, gulp.series( 'customJS', reload ) ); // Reload on customJS file changes.\n\t\tgulp.watch( config.imgSRC, gulp.series( 'images', reload ) ); // Reload on customJS file changes.\n\t})\n);\n\n/**\n * Build for Production.\n *\n * Watches for file changes and runs specific tasks.\n */\ngulp.task('production', gulp.parallel( 'styles', 'customJS', 'images'));\n"
      ]
    },
    "sourceType": "module",
    "mtime": 1589915374000
  },
  "{\"sourceRoot\":\"/Applications/XAMPP/xamppfiles/htdocs/dev-test/\",\"caller\":{\"name\":\"@babel/register\"},\"cwd\":\"/Applications/XAMPP/xamppfiles/htdocs/dev-test\",\"filename\":\"/Applications/XAMPP/xamppfiles/htdocs/dev-test/gulp.config.js\",\"babelrc\":false,\"configFile\":false,\"passPerPreset\":false,\"envName\":\"development\",\"root\":\"/Applications/XAMPP/xamppfiles/htdocs/dev-test\",\"plugins\":[],\"presets\":[]}:7.9.6": {
    "metadata": {},
    "options": {
      "sourceRoot": "/Applications/XAMPP/xamppfiles/htdocs/dev-test/",
      "caller": {
        "name": "@babel/register"
      },
      "cwd": "/Applications/XAMPP/xamppfiles/htdocs/dev-test",
      "filename": "/Applications/XAMPP/xamppfiles/htdocs/dev-test/gulp.config.js",
      "babelrc": false,
      "configFile": false,
      "envName": "development",
      "root": "/Applications/XAMPP/xamppfiles/htdocs/dev-test",
      "sourceMaps": "both",
      "ast": false,
      "passPerPreset": false,
      "plugins": [],
      "presets": [],
      "parserOpts": {
        "sourceType": "module",
        "sourceFileName": "/Applications/XAMPP/xamppfiles/htdocs/dev-test/gulp.config.js",
        "plugins": []
      },
      "generatorOpts": {
        "filename": "/Applications/XAMPP/xamppfiles/htdocs/dev-test/gulp.config.js",
        "comments": true,
        "compact": "auto",
        "sourceMaps": "both",
        "sourceRoot": "/Applications/XAMPP/xamppfiles/htdocs/dev-test/",
        "sourceFileName": "gulp.config.js"
      }
    },
    "ast": null,
    "code": "require('dotenv').config();\n/**\n * Gulp Configuration File\n *\n * 1. Edit the variables as per your project requirements.\n * 2. In paths you can add <<glob or array of globs>>.\n *\n */\n\n\nmodule.exports = {\n  // Project options.\n  projectURL: process.env.DEVELOPMENT_DOMAIN,\n  productURL: './',\n  browserAutoOpen: false,\n  injectChanges: true,\n  // Style options.\n  styleSRC: './src/scss/index.scss',\n  // Path to main .scss file.\n  styleDestination: './dist/css',\n  // Path to place the compiled CSS file. Default set to root folder.\n  outputStyle: 'compact',\n  // Available options â†’ 'compact' or 'compressed' or 'nested' or 'expanded'\n  errLogToConsole: true,\n  precision: 10,\n  // JS Custom options.\n  jsCustomSRC: './src/js/index.js',\n  // Path to JS custom scripts folder.\n  jsCustomDestination: './dist/js/',\n  // Path to place the compiled JS custom scripts file.\n  jsCustomFile: 'index',\n  // Compiled JS custom file name. Default set to custom i.e. custom.js.\n  // Images options.\n  imgSRC: './src/images/**/*',\n  // Source folder of images which should be optimized and watched. You can also specify types e.g. raw/**.{png,jpg,gif} in the glob.\n  imgDST: './dist/images/',\n  // Destination folder of optimized images. Must be different from the imagesSRC folder.\n  // Watch files paths.\n  watchStyles: './src/scss/**/*.scss',\n  // Path to all *.scss files inside css folder and inside them.\n  watchJsCustom: './src/js/**/*.js',\n  // Path to all custom JS files.\n  watchPhp: './**/*.php',\n  // Path to all PHP files.\n  // Browsers you care about for autoprefixing. Browserlist https://github.com/ai/browserslist\n  BROWSERS_LIST: ['last 2 version', '> 1%', 'ie >= 11', 'last 1 Android versions', 'last 1 ChromeAndroid versions', 'last 2 Chrome versions', 'last 2 Firefox versions', 'last 2 Safari versions', 'last 2 iOS versions', 'last 2 Edge versions', 'last 2 Opera versions']\n};\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImd1bHAuY29uZmlnLmpzIl0sIm5hbWVzIjpbInJlcXVpcmUiLCJjb25maWciLCJtb2R1bGUiLCJleHBvcnRzIiwicHJvamVjdFVSTCIsInByb2Nlc3MiLCJlbnYiLCJERVZFTE9QTUVOVF9ET01BSU4iLCJwcm9kdWN0VVJMIiwiYnJvd3NlckF1dG9PcGVuIiwiaW5qZWN0Q2hhbmdlcyIsInN0eWxlU1JDIiwic3R5bGVEZXN0aW5hdGlvbiIsIm91dHB1dFN0eWxlIiwiZXJyTG9nVG9Db25zb2xlIiwicHJlY2lzaW9uIiwianNDdXN0b21TUkMiLCJqc0N1c3RvbURlc3RpbmF0aW9uIiwianNDdXN0b21GaWxlIiwiaW1nU1JDIiwiaW1nRFNUIiwid2F0Y2hTdHlsZXMiLCJ3YXRjaEpzQ3VzdG9tIiwid2F0Y2hQaHAiLCJCUk9XU0VSU19MSVNUIl0sIm1hcHBpbmdzIjoiQUFBQUEsT0FBTyxDQUFDLFFBQUQsQ0FBUCxDQUFrQkMsTUFBbEI7QUFFQTs7Ozs7Ozs7O0FBUUFDLE1BQU0sQ0FBQ0MsT0FBUCxHQUFpQjtBQUVoQjtBQUNBQyxFQUFBQSxVQUFVLEVBQUVDLE9BQU8sQ0FBQ0MsR0FBUixDQUFZQyxrQkFIUjtBQUloQkMsRUFBQUEsVUFBVSxFQUFFLElBSkk7QUFLaEJDLEVBQUFBLGVBQWUsRUFBRSxLQUxEO0FBTWhCQyxFQUFBQSxhQUFhLEVBQUUsSUFOQztBQVFoQjtBQUNBQyxFQUFBQSxRQUFRLEVBQUUsdUJBVE07QUFTbUI7QUFDbkNDLEVBQUFBLGdCQUFnQixFQUFFLFlBVkY7QUFVZ0I7QUFDaENDLEVBQUFBLFdBQVcsRUFBRSxTQVhHO0FBV1E7QUFDeEJDLEVBQUFBLGVBQWUsRUFBRSxJQVpEO0FBYWhCQyxFQUFBQSxTQUFTLEVBQUUsRUFiSztBQWVoQjtBQUNBQyxFQUFBQSxXQUFXLEVBQUUsbUJBaEJHO0FBZ0JrQjtBQUNsQ0MsRUFBQUEsbUJBQW1CLEVBQUUsWUFqQkw7QUFpQm1CO0FBQ25DQyxFQUFBQSxZQUFZLEVBQUUsT0FsQkU7QUFrQk87QUFFdkI7QUFDQUMsRUFBQUEsTUFBTSxFQUFFLG1CQXJCUTtBQXFCYTtBQUM3QkMsRUFBQUEsTUFBTSxFQUFFLGdCQXRCUTtBQXNCVTtBQUUxQjtBQUNBQyxFQUFBQSxXQUFXLEVBQUUsc0JBekJHO0FBeUJxQjtBQUNyQ0MsRUFBQUEsYUFBYSxFQUFFLGtCQTFCQztBQTBCbUI7QUFDbkNDLEVBQUFBLFFBQVEsRUFBRSxZQTNCTTtBQTJCUTtBQUV4QjtBQUNBQyxFQUFBQSxhQUFhLEVBQUUsQ0FDZCxnQkFEYyxFQUVkLE1BRmMsRUFHZCxVQUhjLEVBSWQseUJBSmMsRUFLZCwrQkFMYyxFQU1kLHdCQU5jLEVBT2QseUJBUGMsRUFRZCx3QkFSYyxFQVNkLHFCQVRjLEVBVWQsc0JBVmMsRUFXZCx1QkFYYztBQTlCQyxDQUFqQiIsInNvdXJjZVJvb3QiOiIvQXBwbGljYXRpb25zL1hBTVBQL3hhbXBwZmlsZXMvaHRkb2NzL2Rldi10ZXN0LyIsInNvdXJjZXNDb250ZW50IjpbInJlcXVpcmUoJ2RvdGVudicpLmNvbmZpZygpXG5cbi8qKlxuICogR3VscCBDb25maWd1cmF0aW9uIEZpbGVcbiAqXG4gKiAxLiBFZGl0IHRoZSB2YXJpYWJsZXMgYXMgcGVyIHlvdXIgcHJvamVjdCByZXF1aXJlbWVudHMuXG4gKiAyLiBJbiBwYXRocyB5b3UgY2FuIGFkZCA8PGdsb2Igb3IgYXJyYXkgb2YgZ2xvYnM+Pi5cbiAqXG4gKi9cblxubW9kdWxlLmV4cG9ydHMgPSB7XG5cblx0Ly8gUHJvamVjdCBvcHRpb25zLlxuXHRwcm9qZWN0VVJMOiBwcm9jZXNzLmVudi5ERVZFTE9QTUVOVF9ET01BSU4sXG5cdHByb2R1Y3RVUkw6ICcuLycsXG5cdGJyb3dzZXJBdXRvT3BlbjogZmFsc2UsXG5cdGluamVjdENoYW5nZXM6IHRydWUsXG5cblx0Ly8gU3R5bGUgb3B0aW9ucy5cblx0c3R5bGVTUkM6ICcuL3NyYy9zY3NzL2luZGV4LnNjc3MnLCAvLyBQYXRoIHRvIG1haW4gLnNjc3MgZmlsZS5cblx0c3R5bGVEZXN0aW5hdGlvbjogJy4vZGlzdC9jc3MnLCAvLyBQYXRoIHRvIHBsYWNlIHRoZSBjb21waWxlZCBDU1MgZmlsZS4gRGVmYXVsdCBzZXQgdG8gcm9vdCBmb2xkZXIuXG5cdG91dHB1dFN0eWxlOiAnY29tcGFjdCcsIC8vIEF2YWlsYWJsZSBvcHRpb25zIOKGkiAnY29tcGFjdCcgb3IgJ2NvbXByZXNzZWQnIG9yICduZXN0ZWQnIG9yICdleHBhbmRlZCdcblx0ZXJyTG9nVG9Db25zb2xlOiB0cnVlLFxuXHRwcmVjaXNpb246IDEwLFxuXG5cdC8vIEpTIEN1c3RvbSBvcHRpb25zLlxuXHRqc0N1c3RvbVNSQzogJy4vc3JjL2pzL2luZGV4LmpzJywgLy8gUGF0aCB0byBKUyBjdXN0b20gc2NyaXB0cyBmb2xkZXIuXG5cdGpzQ3VzdG9tRGVzdGluYXRpb246ICcuL2Rpc3QvanMvJywgLy8gUGF0aCB0byBwbGFjZSB0aGUgY29tcGlsZWQgSlMgY3VzdG9tIHNjcmlwdHMgZmlsZS5cblx0anNDdXN0b21GaWxlOiAnaW5kZXgnLCAvLyBDb21waWxlZCBKUyBjdXN0b20gZmlsZSBuYW1lLiBEZWZhdWx0IHNldCB0byBjdXN0b20gaS5lLiBjdXN0b20uanMuXG5cblx0Ly8gSW1hZ2VzIG9wdGlvbnMuXG5cdGltZ1NSQzogJy4vc3JjL2ltYWdlcy8qKi8qJywgLy8gU291cmNlIGZvbGRlciBvZiBpbWFnZXMgd2hpY2ggc2hvdWxkIGJlIG9wdGltaXplZCBhbmQgd2F0Y2hlZC4gWW91IGNhbiBhbHNvIHNwZWNpZnkgdHlwZXMgZS5nLiByYXcvKioue3BuZyxqcGcsZ2lmfSBpbiB0aGUgZ2xvYi5cblx0aW1nRFNUOiAnLi9kaXN0L2ltYWdlcy8nLCAvLyBEZXN0aW5hdGlvbiBmb2xkZXIgb2Ygb3B0aW1pemVkIGltYWdlcy4gTXVzdCBiZSBkaWZmZXJlbnQgZnJvbSB0aGUgaW1hZ2VzU1JDIGZvbGRlci5cblxuXHQvLyBXYXRjaCBmaWxlcyBwYXRocy5cblx0d2F0Y2hTdHlsZXM6ICcuL3NyYy9zY3NzLyoqLyouc2NzcycsIC8vIFBhdGggdG8gYWxsICouc2NzcyBmaWxlcyBpbnNpZGUgY3NzIGZvbGRlciBhbmQgaW5zaWRlIHRoZW0uXG5cdHdhdGNoSnNDdXN0b206ICcuL3NyYy9qcy8qKi8qLmpzJywgLy8gUGF0aCB0byBhbGwgY3VzdG9tIEpTIGZpbGVzLlxuXHR3YXRjaFBocDogJy4vKiovKi5waHAnLCAvLyBQYXRoIHRvIGFsbCBQSFAgZmlsZXMuXG5cblx0Ly8gQnJvd3NlcnMgeW91IGNhcmUgYWJvdXQgZm9yIGF1dG9wcmVmaXhpbmcuIEJyb3dzZXJsaXN0IGh0dHBzOi8vZ2l0aHViLmNvbS9haS9icm93c2Vyc2xpc3Rcblx0QlJPV1NFUlNfTElTVDogW1xuXHRcdCdsYXN0IDIgdmVyc2lvbicsXG5cdFx0Jz4gMSUnLFxuXHRcdCdpZSA+PSAxMScsXG5cdFx0J2xhc3QgMSBBbmRyb2lkIHZlcnNpb25zJyxcblx0XHQnbGFzdCAxIENocm9tZUFuZHJvaWQgdmVyc2lvbnMnLFxuXHRcdCdsYXN0IDIgQ2hyb21lIHZlcnNpb25zJyxcblx0XHQnbGFzdCAyIEZpcmVmb3ggdmVyc2lvbnMnLFxuXHRcdCdsYXN0IDIgU2FmYXJpIHZlcnNpb25zJyxcblx0XHQnbGFzdCAyIGlPUyB2ZXJzaW9ucycsXG5cdFx0J2xhc3QgMiBFZGdlIHZlcnNpb25zJyxcblx0XHQnbGFzdCAyIE9wZXJhIHZlcnNpb25zJ1xuXHRdXG59XG4iXX0=",
    "map": {
      "version": 3,
      "sources": [
        "gulp.config.js"
      ],
      "names": [
        "require",
        "config",
        "module",
        "exports",
        "projectURL",
        "process",
        "env",
        "DEVELOPMENT_DOMAIN",
        "productURL",
        "browserAutoOpen",
        "injectChanges",
        "styleSRC",
        "styleDestination",
        "outputStyle",
        "errLogToConsole",
        "precision",
        "jsCustomSRC",
        "jsCustomDestination",
        "jsCustomFile",
        "imgSRC",
        "imgDST",
        "watchStyles",
        "watchJsCustom",
        "watchPhp",
        "BROWSERS_LIST"
      ],
      "mappings": "AAAAA,OAAO,CAAC,QAAD,CAAP,CAAkBC,MAAlB;AAEA;;;;;;;;;AAQAC,MAAM,CAACC,OAAP,GAAiB;AAEhB;AACAC,EAAAA,UAAU,EAAEC,OAAO,CAACC,GAAR,CAAYC,kBAHR;AAIhBC,EAAAA,UAAU,EAAE,IAJI;AAKhBC,EAAAA,eAAe,EAAE,KALD;AAMhBC,EAAAA,aAAa,EAAE,IANC;AAQhB;AACAC,EAAAA,QAAQ,EAAE,uBATM;AASmB;AACnCC,EAAAA,gBAAgB,EAAE,YAVF;AAUgB;AAChCC,EAAAA,WAAW,EAAE,SAXG;AAWQ;AACxBC,EAAAA,eAAe,EAAE,IAZD;AAahBC,EAAAA,SAAS,EAAE,EAbK;AAehB;AACAC,EAAAA,WAAW,EAAE,mBAhBG;AAgBkB;AAClCC,EAAAA,mBAAmB,EAAE,YAjBL;AAiBmB;AACnCC,EAAAA,YAAY,EAAE,OAlBE;AAkBO;AAEvB;AACAC,EAAAA,MAAM,EAAE,mBArBQ;AAqBa;AAC7BC,EAAAA,MAAM,EAAE,gBAtBQ;AAsBU;AAE1B;AACAC,EAAAA,WAAW,EAAE,sBAzBG;AAyBqB;AACrCC,EAAAA,aAAa,EAAE,kBA1BC;AA0BmB;AACnCC,EAAAA,QAAQ,EAAE,YA3BM;AA2BQ;AAExB;AACAC,EAAAA,aAAa,EAAE,CACd,gBADc,EAEd,MAFc,EAGd,UAHc,EAId,yBAJc,EAKd,+BALc,EAMd,wBANc,EAOd,yBAPc,EAQd,wBARc,EASd,qBATc,EAUd,sBAVc,EAWd,uBAXc;AA9BC,CAAjB",
      "sourceRoot": "/Applications/XAMPP/xamppfiles/htdocs/dev-test/",
      "sourcesContent": [
        "require('dotenv').config()\n\n/**\n * Gulp Configuration File\n *\n * 1. Edit the variables as per your project requirements.\n * 2. In paths you can add <<glob or array of globs>>.\n *\n */\n\nmodule.exports = {\n\n\t// Project options.\n\tprojectURL: process.env.DEVELOPMENT_DOMAIN,\n\tproductURL: './',\n\tbrowserAutoOpen: false,\n\tinjectChanges: true,\n\n\t// Style options.\n\tstyleSRC: './src/scss/index.scss', // Path to main .scss file.\n\tstyleDestination: './dist/css', // Path to place the compiled CSS file. Default set to root folder.\n\toutputStyle: 'compact', // Available options â†’ 'compact' or 'compressed' or 'nested' or 'expanded'\n\terrLogToConsole: true,\n\tprecision: 10,\n\n\t// JS Custom options.\n\tjsCustomSRC: './src/js/index.js', // Path to JS custom scripts folder.\n\tjsCustomDestination: './dist/js/', // Path to place the compiled JS custom scripts file.\n\tjsCustomFile: 'index', // Compiled JS custom file name. Default set to custom i.e. custom.js.\n\n\t// Images options.\n\timgSRC: './src/images/**/*', // Source folder of images which should be optimized and watched. You can also specify types e.g. raw/**.{png,jpg,gif} in the glob.\n\timgDST: './dist/images/', // Destination folder of optimized images. Must be different from the imagesSRC folder.\n\n\t// Watch files paths.\n\twatchStyles: './src/scss/**/*.scss', // Path to all *.scss files inside css folder and inside them.\n\twatchJsCustom: './src/js/**/*.js', // Path to all custom JS files.\n\twatchPhp: './**/*.php', // Path to all PHP files.\n\n\t// Browsers you care about for autoprefixing. Browserlist https://github.com/ai/browserslist\n\tBROWSERS_LIST: [\n\t\t'last 2 version',\n\t\t'> 1%',\n\t\t'ie >= 11',\n\t\t'last 1 Android versions',\n\t\t'last 1 ChromeAndroid versions',\n\t\t'last 2 Chrome versions',\n\t\t'last 2 Firefox versions',\n\t\t'last 2 Safari versions',\n\t\t'last 2 iOS versions',\n\t\t'last 2 Edge versions',\n\t\t'last 2 Opera versions'\n\t]\n}\n"
      ]
    },
    "sourceType": "module",
    "mtime": 1589915176000
  }
}